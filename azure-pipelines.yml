trigger:
- master
- development

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
    
pool:
  vmImage: 'ubuntu-latest'
  
stages:
  - stage: Build
    jobs:
    - job: Build
      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk 7.x'
        inputs:
          packageType: 'sdk'
          version: 7.x
        
      - task: DotNetCoreCLI@2
        displayName: 'Restore'
        inputs:
          command: restore
          projects: '**/*.csproj'
      
      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration) --no-restore'
    
      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: test
          projects: '**/*[Tt]ests/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Package Code'
        inputs:
          command: publish
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True
          
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

  - stage: Deployment
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - job: Deploy
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'
          cleanDestinationFolder: true
      
      - task: PowerShell@2
        inputs:
          targetType: 'inline' 
          script: 'pwd'
      
#
#- ${{ if eq(variables.isMain, 'true') }}:
#  - task: PublishBuildArtifacts@1
#    inputs:
#      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#      ArtifactName: 'drop'
#      publishLocation: 'Container'