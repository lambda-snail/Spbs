/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Integrations.Nordigen.Models
{
    /// <summary>
    /// EndUserAgreement.
    /// </summary>
    [DataContract(Name = "EndUserAgreement")]
    public partial class EndUserAgreement : IEquatable<EndUserAgreement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndUserAgreement" /> class.
        /// </summary>
        [JsonConstructor]
        protected EndUserAgreement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndUserAgreement" /> class.
        /// </summary>
        /// <param name="maxHistoricalDays">Maximum number of days of transaction data to retrieve. (default to 90).</param>
        /// <param name="accessValidForDays">Number of days from acceptance that the access can be used. (default to 90).</param>
        /// <param name="accessScope">Array containing one or several values of [&#39;balances&#39;, &#39;details&#39;, &#39;transactions&#39;].</param>
        /// <param name="institutionId">an Institution ID for this EUA (required).</param>
        public EndUserAgreement(int maxHistoricalDays = 90, int accessValidForDays = 90, List<string> accessScope = default(List<string>), string institutionId = default(string))
        {
            // to ensure "institutionId" is required (not null)
            if (institutionId == null)
            {
                throw new ArgumentNullException("institutionId is a required property for EndUserAgreement and cannot be null");
            }
            this.InstitutionId = institutionId;
            this.MaxHistoricalDays = maxHistoricalDays;
            this.AccessValidForDays = accessValidForDays;
            this.AccessScope = accessScope;
        }

        /// <summary>
        /// The ID of this End User Agreement, used to refer to this end user agreement in other API calls.
        /// </summary>
        /// <value>The ID of this End User Agreement, used to refer to this end user agreement in other API calls.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The date &amp; time at which the end user agreement was created.
        /// </summary>
        /// <value>The date &amp; time at which the end user agreement was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; private set; }

        /// <summary>
        /// Returns false as Created should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreated()
        {
            return false;
        }
        /// <summary>
        /// Maximum number of days of transaction data to retrieve.
        /// </summary>
        /// <value>Maximum number of days of transaction data to retrieve.</value>
        [DataMember(Name = "max_historical_days", EmitDefaultValue = false)]
        public int MaxHistoricalDays { get; set; }

        /// <summary>
        /// Number of days from acceptance that the access can be used.
        /// </summary>
        /// <value>Number of days from acceptance that the access can be used.</value>
        [DataMember(Name = "access_valid_for_days", EmitDefaultValue = false)]
        public int AccessValidForDays { get; set; }

        /// <summary>
        /// Array containing one or several values of [&#39;balances&#39;, &#39;details&#39;, &#39;transactions&#39;]
        /// </summary>
        /// <value>Array containing one or several values of [&#39;balances&#39;, &#39;details&#39;, &#39;transactions&#39;]</value>
        [DataMember(Name = "access_scope", EmitDefaultValue = false)]
        public List<string> AccessScope { get; set; }

        /// <summary>
        /// The date &amp; time at which the end user accepted the agreement.
        /// </summary>
        /// <value>The date &amp; time at which the end user accepted the agreement.</value>
        [DataMember(Name = "accepted", EmitDefaultValue = true)]
        public DateTime? Accepted { get; private set; }

        /// <summary>
        /// Returns false as Accepted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccepted()
        {
            return false;
        }
        /// <summary>
        /// an Institution ID for this EUA
        /// </summary>
        /// <value>an Institution ID for this EUA</value>
        [DataMember(Name = "institution_id", IsRequired = true, EmitDefaultValue = true)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EndUserAgreement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  MaxHistoricalDays: ").Append(MaxHistoricalDays).Append("\n");
            sb.Append("  AccessValidForDays: ").Append(AccessValidForDays).Append("\n");
            sb.Append("  AccessScope: ").Append(AccessScope).Append("\n");
            sb.Append("  Accepted: ").Append(Accepted).Append("\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndUserAgreement);
        }

        /// <summary>
        /// Returns true if EndUserAgreement instances are equal
        /// </summary>
        /// <param name="input">Instance of EndUserAgreement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndUserAgreement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.MaxHistoricalDays == input.MaxHistoricalDays ||
                    this.MaxHistoricalDays.Equals(input.MaxHistoricalDays)
                ) && 
                (
                    this.AccessValidForDays == input.AccessValidForDays ||
                    this.AccessValidForDays.Equals(input.AccessValidForDays)
                ) && 
                (
                    this.AccessScope == input.AccessScope ||
                    this.AccessScope != null &&
                    input.AccessScope != null &&
                    this.AccessScope.SequenceEqual(input.AccessScope)
                ) && 
                (
                    this.Accepted == input.Accepted ||
                    (this.Accepted != null &&
                    this.Accepted.Equals(input.Accepted))
                ) && 
                (
                    this.InstitutionId == input.InstitutionId ||
                    (this.InstitutionId != null &&
                    this.InstitutionId.Equals(input.InstitutionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxHistoricalDays.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessValidForDays.GetHashCode();
                if (this.AccessScope != null)
                {
                    hashCode = (hashCode * 59) + this.AccessScope.GetHashCode();
                }
                if (this.Accepted != null)
                {
                    hashCode = (hashCode * 59) + this.Accepted.GetHashCode();
                }
                if (this.InstitutionId != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MaxHistoricalDays (int) maximum
            if (this.MaxHistoricalDays > (int)730)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxHistoricalDays, must be a value less than or equal to 730.", new [] { "MaxHistoricalDays" });
            }

            // MaxHistoricalDays (int) minimum
            if (this.MaxHistoricalDays < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxHistoricalDays, must be a value greater than or equal to 1.", new [] { "MaxHistoricalDays" });
            }

            // AccessValidForDays (int) maximum
            if (this.AccessValidForDays > (int)90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccessValidForDays, must be a value less than or equal to 90.", new [] { "AccessValidForDays" });
            }

            // AccessValidForDays (int) minimum
            if (this.AccessValidForDays < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccessValidForDays, must be a value greater than or equal to 1.", new [] { "AccessValidForDays" });
            }

            yield break;
        }
    }

}
