/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Integrations.Nordigen.Models
{
    /// <summary>
    /// Instructed amount
    /// </summary>
    [DataContract(Name = "PaymentRead_instructed_amount")]
    public partial class PaymentReadInstructedAmount : IEquatable<PaymentReadInstructedAmount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentReadInstructedAmount" /> class.
        /// </summary>
        [JsonConstructor]
        protected PaymentReadInstructedAmount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentReadInstructedAmount" /> class.
        /// </summary>
        /// <param name="amount">Instructed amount (required).</param>
        /// <param name="currency">Instructed amount currency (required).</param>
        public PaymentReadInstructedAmount(decimal amount = default(decimal), string currency = default(string))
        {
            this.Amount = amount;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for PaymentReadInstructedAmount and cannot be null");
            }
            this.Currency = currency;
        }

        /// <summary>
        /// Instructed amount
        /// </summary>
        /// <value>Instructed amount</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Instructed amount currency
        /// </summary>
        /// <value>Instructed amount currency</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentReadInstructedAmount {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentReadInstructedAmount);
        }

        /// <summary>
        /// Returns true if PaymentReadInstructedAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentReadInstructedAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentReadInstructedAmount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                return hashCode;
            }
        }
    }
}
