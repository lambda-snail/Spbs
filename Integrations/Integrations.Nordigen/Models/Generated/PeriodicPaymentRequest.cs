/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Integrations.Nordigen.Models
{
    /// <summary>
    /// Periodic Payment Serializer.
    /// </summary>
    [DataContract(Name = "PeriodicPaymentRequest")]
    public partial class PeriodicPaymentRequest : IEquatable<PeriodicPaymentRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public FrequencyEnum? Frequency { get; set; }

        /// <summary>
        /// Behavior when periodic payment dates fall on holiday.
        /// </summary>
        /// <value>Behavior when periodic payment dates fall on holiday.</value>
        [DataMember(Name = "execution_rule", EmitDefaultValue = false)]
        public ExecutionRuleEnum? ExecutionRule { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodicPaymentRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected PeriodicPaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodicPaymentRequest" /> class.
        /// </summary>
        /// <param name="frequency">frequency.</param>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="executionRule">Behavior when periodic payment dates fall on holiday..</param>
        /// <param name="dayOfExecution">dayOfExecution.</param>
        public PeriodicPaymentRequest(FrequencyEnum? frequency = default(FrequencyEnum?), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), ExecutionRuleEnum? executionRule = default(ExecutionRuleEnum?), string dayOfExecution = default(string))
        {
            this.StartDate = startDate;
            this.Frequency = frequency;
            this.EndDate = endDate;
            this.ExecutionRule = executionRule;
            this.DayOfExecution = dayOfExecution;
        }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "end_date", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets DayOfExecution
        /// </summary>
        [DataMember(Name = "day_of_execution", EmitDefaultValue = false)]
        public string DayOfExecution { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodicPaymentRequest {\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExecutionRule: ").Append(ExecutionRule).Append("\n");
            sb.Append("  DayOfExecution: ").Append(DayOfExecution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodicPaymentRequest);
        }

        /// <summary>
        /// Returns true if PeriodicPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodicPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodicPaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Frequency == input.Frequency ||
                    this.Frequency.Equals(input.Frequency)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ExecutionRule == input.ExecutionRule ||
                    this.ExecutionRule.Equals(input.ExecutionRule)
                ) && 
                (
                    this.DayOfExecution == input.DayOfExecution ||
                    (this.DayOfExecution != null &&
                    this.DayOfExecution.Equals(input.DayOfExecution))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Frequency.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExecutionRule.GetHashCode();
                if (this.DayOfExecution != null)
                {
                    hashCode = (hashCode * 59) + this.DayOfExecution.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
