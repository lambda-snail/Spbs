/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Integrations.Nordigen.Models
{
    /// <summary>
    /// Debtor account write serializer.
    /// </summary>
    [DataContract(Name = "DebtorAccountWrite")]
    public partial class DebtorAccountWrite : IEquatable<DebtorAccountWrite>, IValidatableObject
    {

        /// <summary>
        /// Debtor account type
        /// </summary>
        /// <value>Debtor account type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebtorAccountWrite" /> class.
        /// </summary>
        [JsonConstructor]
        protected DebtorAccountWrite() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebtorAccountWrite" /> class.
        /// </summary>
        /// <param name="currency">Debtor account currency.</param>
        /// <param name="typeNumber">Debtor account type identifier (required).</param>
        /// <param name="type">Debtor account type.</param>
        /// <param name="name">Debtor account name (required).</param>
        /// <param name="addressCountry">Debtor account address country.</param>
        /// <param name="postCode">Debtor account post code.</param>
        /// <param name="addressStreet">Debtor account address street.</param>
        public DebtorAccountWrite(string currency = default(string), string typeNumber = default(string), TypeEnum? type = default(TypeEnum?), string name = default(string), string addressCountry = default(string), string postCode = default(string), string addressStreet = default(string))
        {
            // to ensure "typeNumber" is required (not null)
            if (typeNumber == null)
            {
                throw new ArgumentNullException("typeNumber is a required property for DebtorAccountWrite and cannot be null");
            }
            this.TypeNumber = typeNumber;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DebtorAccountWrite and cannot be null");
            }
            this.Name = name;
            this.Currency = currency;
            this.Type = type;
            this.AddressCountry = addressCountry;
            this.PostCode = postCode;
            this.AddressStreet = addressStreet;
        }

        /// <summary>
        /// Debtor account currency
        /// </summary>
        /// <value>Debtor account currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Debtor account type identifier
        /// </summary>
        /// <value>Debtor account type identifier</value>
        [DataMember(Name = "type_number", IsRequired = true, EmitDefaultValue = true)]
        public string TypeNumber { get; set; }

        /// <summary>
        /// Debtor account name
        /// </summary>
        /// <value>Debtor account name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Debtor account address country
        /// </summary>
        /// <value>Debtor account address country</value>
        [DataMember(Name = "address_country", EmitDefaultValue = false)]
        public string AddressCountry { get; set; }

        /// <summary>
        /// Debtor account post code
        /// </summary>
        /// <value>Debtor account post code</value>
        [DataMember(Name = "post_code", EmitDefaultValue = false)]
        public string PostCode { get; set; }

        /// <summary>
        /// Debtor account address street
        /// </summary>
        /// <value>Debtor account address street</value>
        [DataMember(Name = "address_street", EmitDefaultValue = false)]
        public string AddressStreet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebtorAccountWrite {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TypeNumber: ").Append(TypeNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressCountry: ").Append(AddressCountry).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebtorAccountWrite);
        }

        /// <summary>
        /// Returns true if DebtorAccountWrite instances are equal
        /// </summary>
        /// <param name="input">Instance of DebtorAccountWrite to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebtorAccountWrite input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.TypeNumber == input.TypeNumber ||
                    (this.TypeNumber != null &&
                    this.TypeNumber.Equals(input.TypeNumber))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AddressCountry == input.AddressCountry ||
                    (this.AddressCountry != null &&
                    this.AddressCountry.Equals(input.AddressCountry))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.AddressStreet == input.AddressStreet ||
                    (this.AddressStreet != null &&
                    this.AddressStreet.Equals(input.AddressStreet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.TypeNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TypeNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.AddressCountry != null)
                {
                    hashCode = (hashCode * 59) + this.AddressCountry.GetHashCode();
                }
                if (this.PostCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostCode.GetHashCode();
                }
                if (this.AddressStreet != null)
                {
                    hashCode = (hashCode * 59) + this.AddressStreet.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 3.", new [] { "Currency" });
            }

            // TypeNumber (string) maxLength
            if (this.TypeNumber != null && this.TypeNumber.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TypeNumber, length must be less than 128.", new [] { "TypeNumber" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 70)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 70.", new [] { "Name" });
            }

            // AddressCountry (string) maxLength
            if (this.AddressCountry != null && this.AddressCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressCountry, length must be less than 2.", new [] { "AddressCountry" });
            }

            // PostCode (string) maxLength
            if (this.PostCode != null && this.PostCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostCode, length must be less than 30.", new [] { "PostCode" });
            }

            // AddressStreet (string) maxLength
            if (this.AddressStreet != null && this.AddressStreet.Length > 140)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressStreet, length must be less than 140.", new [] { "AddressStreet" });
            }

            yield break;
        }
    }

}
